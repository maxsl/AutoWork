package server

import (
	"bufio"
	"encoding/binary"
	"fmt"
	"io"
	"net"
	"sync"
)

var empty []byte

const (
	headlength int = 5
)

func LiestenTCP(laddr string, registerFunc func(con net.Conn)) error {
	lis, err := net.Listen("tcp", laddr)
	if err != nil {
		return err
	}
	if registerFunc == nil {
		registerFunc = DefalutRegisterConn
	}
	for {
		con, err := lis.Accept()
		if err != nil {
			continue
		}
		go registerFunc(con)
	}
}

func DefalutRegisterConn(conn net.Conn) {
	buf := newConnectionInfo(conn)
	authmsg, err := buf.ReaderOnce()
	if err != nil {
		conn.Close()
		return
	}
	if !AuthFuncation(authmsg) {
		conn.Close()
		return
	}
	buf.StillRead()
}

type ConnectionInfo struct {
	Conn net.Conn
	Buf  *bufio.Reader
	lock *sync.RWMutex
}

var ConnectionInfoPool sync.Pool

func newConnectionInfo(conn net.Conn) *ConnectionInfo {
	buf := bufio.NewReader(conn)
	if v := ConnectionInfoPool.Get(); v != nil {
		br := v.(*ConnectionInfo)
		br.Conn = conn
		br.Buf = buf
		return br
	}
	return &ConnectionInfo{conn, buf, new(sync.RWMutex)}
}

func putnewConnectionInfo(br *ConnectionInfo) {
	br.Conn = nil
	br.Buf = nil
	ConnectionInfoPool.Put(br)
}

func (self *ConnectionInfo) Close() error {
	return self.Conn.Close()
}

func (self *ConnectionInfo) Writer(msg []byte) (int, error) {
	mgslen := len(msg)
	head := make([]byte, headlength+mgslen+1)
	binary.PutUvarint(head, uint64(mgslen))
	copy(head[headlength:], msg)
	head[mgslen] = '\n'

	self.lock.Lock()
	defer self.lock.Unlock()

	return self.Conn.Write(head)

}

func (self *ConnectionInfo) ReaderOnce() ([]byte, error) {
	head := make([]byte, headlength)
	_, err := self.Buf.Read(head)
	if err != nil {
		return empty, err
	}
	bodyLen, _ := binary.Uvarint(head)
	line, err := self.Buf.ReadSlice('\n')
	if err != nil {
		return empty, err
	}
	if uint64(len(line)-1) != bodyLen {
		return empty, io.EOF
	}
	return line[:bodyLen], nil
}

func (self *ConnectionInfo) StillRead() {
	for {
		msg, err := self.ReaderOnce()
		if err != nil {
			if err == io.EOF {
				continue
			}
			break
		}
		fmt.Printf("收到的信息: %s\n", string(msg))
	}
}

func AuthFuncation(msg []byte) bool {
	return true
}
